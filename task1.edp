
real xMin = -10.0;
real xMax = 10.0;
real yMin = -5.0;
real yMax = 5.0;

real xMidLeft = -5.0;
real xMidRight = 5;
real xMid = 0;
real yMid = 0;


int LabelIn = 1;
int LabelOut = 2;


int Nin = 3 * 64; 
int Nout = Nin * 8;


border GammaLT1( t = 0.0, 1) {
    x = xMin + (xMidLeft - xMin) * t;
    y = x + 10;
    label = LabelIn;
}

border GammaLT2( t = 0.0, 1) {
    x = xMidLeft + (xMid - xMidLeft) * t;
    y = 0.48 * x^2 + 2.4 * x + 5;
    label = LabelIn;
}

border GammaRT1( t = 0.0, 1) {
    x = xMid +(xMidRight - xMid) * t;
    y = 0.48 * x^2 - 2.4 * x + 5;
    label = LabelIn;
}

border GammaRT2( t = 0.0, 1) {
    x = xMidRight +(xMax - xMidRight) * t;
    y = 10 - x;
    label = LabelIn;
}

border GammaLB1( t = 0.0, 1) {
    x = xMidLeft +(xMin - xMidLeft) * t;
    y = -x - 10;
    label = LabelIn;
}

border GammaLB2( t = 0.0, 1) {
    x = xMid + (xMidLeft - xMid) * t;
    y = -0.48 * x^2 - 2.4 * x - 5;
    label = LabelIn;
}

border GammaRB1( t = 0.0, 1) {
    x = xMidRight + (xMid - xMidRight) * t;
    y = -0.48 * x^2 + 2.4 * x - 5;
    label = LabelIn;
}

border GammaRB2( t = 0.0, 1) {
    x = xMax + (xMidRight - xMax) * t;
    y = x - 10;
    label = LabelIn;
}

border GammaOut( t = 0.0, 2*pi) {
    x = 11 * cos(t);
    y = 8 * sin(t);
    label = LabelOut;
}


/* plot(GammaLT1(Nin) + GammaLT2(Nin) + GammaRT1(Nin) + GammaRT2(Nin) +
     GammaLB1(Nin) + GammaLB2(Nin) + GammaRB1(Nin) + GammaRB2(Nin) +
     GammaOut(Nout)); */


mesh Th = buildmesh(GammaLT1(Nin) + GammaLT2(Nin) + GammaRT1(Nin) + GammaRT2(Nin) +
                    GammaLB1(Nin) + GammaLB2(Nin) + GammaRB1(Nin) + GammaRB2(Nin) +
                    GammaOut(Nout));

mesh Th2 = buildmesh(GammaLT1(Nin*2) + GammaLT2(Nin*2) + GammaRT1(Nin*2) + GammaRT2(Nin*2) +
                    GammaLB1(Nin*2) + GammaLB2(Nin*2) + GammaRB1(Nin*2) + GammaRB2(Nin*2) +
                    GammaOut(Nout*2));

mesh Th4 = buildmesh(GammaLT1(Nin*4) + GammaLT2(Nin*4) + GammaRT1(Nin*4) + GammaRT2(Nin*4) +
                    GammaLB1(Nin*4) + GammaLB2(Nin*4) + GammaRB1(Nin*4) + GammaRB2(Nin*4) +
                    GammaOut(Nout*4)); 
/*  plot(Th); */

fespace Vh(Th, P1); 

func uExactFunc = sin(x + y^2);
func f = (1 + 4 * y^2) * sin(x + y^2) - 2 * cos(x + y^2);
func ux1 = cos(x + y^2);
func uy1 = 2 * y * cos(x + y^2);

Vh u,v;
Vh uExact = uExactFunc; 
Vh ff = f;
Vh ux = ux1;
Vh uy = uy1;
Vh h = hTriangle;



varf PoissonBilinearForm (u,v) = 
    int2d(Th)(
        dx(u) * dx(v) + dy(u) * dy(v)
    )
    + on(LabelIn, u = uExact)
    ;

/* Linear form defenition for rhs */


varf RhsLinearForm(u,v) = 
    int1d(Th, LabelOut)( (ux * N.x + uy * N.y) * v)
    + int2d(Th)(ff * v )
    + on(LabelIn, u = uExact)
    ;

matrix A = PoissonBilinearForm(Vh, Vh);
real[int] b = RhsLinearForm(0, Vh);

u[] = A^-1 * b; 

fespace Vh2(Th2, P1); 
Vh2 u2, v2;
Vh2 ff2 = f;
Vh2 uExact2 = uExactFunc;
Vh2 ux2 = ux1;
Vh2 uy2 = uy1;
Vh2 h2 = hTriangle;

varf PoissonBilinearForm2(u2, v2) = 
    int2d(Th2)(
        dx(u2) * dx(v2) + dy(u2) * dy(v2)
    )
    + on(LabelIn, u2 = uExact2);


varf RhsLinearForm2(u2, v2) = 
    int1d(Th2, LabelOut)((ux2 * N.x + uy2 * N.y) * v2)
    + int2d(Th2)(ff2 * v2)
    + on(LabelIn, u2 = uExact2);


matrix A2 = PoissonBilinearForm2(Vh2, Vh2);
real[int] b2 = RhsLinearForm2(0, Vh2);


u2[] = A2^-1 * b2;



fespace Vh4(Th4, P1); 
Vh4 u4, v4;
Vh4 ff4 = f;
Vh4 uExact4 = uExactFunc;
Vh4 ux4 = ux1;
Vh4 uy4 = uy1;
Vh4 h4 = hTriangle;

varf PoissonBilinearForm4(u4, v4) = 
    int2d(Th4)(
        dx(u4) * dx(v4) + dy(u4) * dy(v4)
    )
    + on(LabelIn, u4 = uExact4);


varf RhsLinearForm4(u4, v4) = 
    int1d(Th4, LabelOut)((ux4 * N.x + uy4 * N.y) * v4)
    + int2d(Th4)(ff4 * v4)
    + on(LabelIn, u4 = uExact4);


matrix A4 = PoissonBilinearForm4(Vh4, Vh4);
real[int] b4 = RhsLinearForm4(0, Vh4);


u4[] = A4^-1 * b4;

string plotTitle = "Poisson Solution";
/* plot(Th2, u2, fill = true, dim = 2, value = 1, nbiso = 10, cmm = plotTitle); */

string plotTitle1 = "Exact Solution";
/* plot(Th2, uExact2, fill = true, dim = 2, value = 1, nbiso = 10, cmm = plotTitle1); */
 

Vh uErrorAbs = abs(u - uExact);
Vh2 uErrorAbs2 = abs(u2 - uExact2);
Vh4 uErrorAbs4 = abs(u4 - uExact4);

string plotTitle2 = "Error";
plot(Th2, uErrorAbs2, fill=true, dim = 3, value = 1, nbiso = 10, cmm = plotTitle2);

/* Error in L2 norm calculation*/
real uErorL2Norm = sqrt( int2d(Th)((uErrorAbs)^2));
real uErorL2Norm2 = sqrt( int2d(Th2)((uErrorAbs2)^2));
real uErorL2Norm4 = sqrt( int2d(Th4)((uErrorAbs4)^2));
/*  L2 norm u*/
real uL2Norm = sqrt( int2d(Th)((u)^2));
real uL2Norm2 = sqrt( int2d(Th2)((u2)^2));
real uL2Norm4 = sqrt( int2d(Th4)((u4)^2));
/*  L2 norm uExact */
real uExactL2Norm = sqrt( int2d(Th)(uExact^2));
real uExactL2Norm2 = sqrt( int2d(Th2)(uExact2^2));
real uExactL2Norm4 = sqrt( int2d(Th4)(uExact4^2));
/*  Calculate p when we don't know uExact */
real uu2 = sqrt(int2d(Th2)( (u - u2)^2 ));
real u2u4 = sqrt(int2d(Th4)( (u2 - u4)^2 ));
real err2 = uu2 / u2u4;
real p = log(err2)/log(2.0);
cout << "p = " << p << endl;


/*  Relative uError */
real uErrorRelL2Norm = uErorL2Norm / uExactL2Norm;
real uErrorRelL2Norm2 = uErorL2Norm2 / uExactL2Norm2;
real uErrorRelL2Norm4 = uErorL2Norm4 / uExactL2Norm4;


cout << "size of mesh = " << h[].max << endl;
cout << "size of mesh = " << h2[].max << endl;
cout << "size of mesh = " << h4[].max << endl;
cout<<" ======= parametrs, when we know uExact ======="<< endl;
cout << "||uEror||_L2 " << uErorL2Norm << endl;
cout << "||uEror 2||_L2 " << uErorL2Norm2 << endl;
cout << "||uEror 4||_L2 " << uErorL2Norm4 << endl;
cout << "||uErorRel||_L2 " << uErrorRelL2Norm << endl;
cout << "||uErorRel 2||_L2 " << uErrorRelL2Norm2 << endl;
cout << "||uErorRel 4||_L2 " << uErrorRelL2Norm4 << endl;
cout << "||u||_L2 " << uL2Norm << endl;
cout << "||u 2||_L2 " << uL2Norm2 << endl;
cout << "||u 4||_L2 " << uL2Norm4 << endl;

cout<<" ======= parametrs, when we don't know uExact ======="<< endl;
cout << "||uEror||_L2 " << uu2 << endl;
cout << "||uEror2||_L2 " << u2u4 << endl;
cout << "||uErorRel||_L2 " << uu2/uL2Norm2 << endl;
cout << "||uErorRel2||_L2 " << u2u4/uL2Norm4 << endl;


